# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
# alt - h : yabai -m window --focus west

# swap managed window
# shift + alt - h : yabai -m window --swap north

# move managed window
# shift + cmd - h : yabai -m window --warp east

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float --grid 4:4:1:1:2:2

# toggle sticky(+float), picture-in-picture
# alt - p : yabai -m window --toggle sticky --toggle pip






# focus window
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - h : yabai -m window --focus west
alt - l : yabai -m window --focus east

# move managed window
shift + alt - j : yabai -m window --warp south
shift + alt - k : yabai -m window --warp north
shift + alt - h : yabai -m window --warp west
shift + alt - l : yabai -m window --warp east

# change focus between external displays (left and right)
alt - s: yabai -m display --focus west
alt - g: yabai -m display --focus east

# make floating window fill screen
shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# rotate layout clockwise
shift + alt - r : yabai -m space --rotate 270

# flip along y-axis
shift + alt - y : yabai -m space --mirror y-axis

# flip along x-axis
shift + alt - x : yabai -m space --mirror x-axis

# toggle window float
shift + alt - z : yabai -m window --toggle float --grid 4:4:1:1:2:2

# float / unfloat window and center on screen
alt - z : yabai -m window --toggle float --grid 4:4:1:1:2:2

# toggle sticky(+float), picture-in-picture
alt - w : yabai -m window --toggle sticky --toggle pip

# balance size of windows
shift + alt - w : yabai -m space --balance

# move window to space #
shift + alt - 1 : yabai -m window --space 1;
shift + alt - 2 : yabai -m window --space 2;
shift + alt - 3 : yabai -m window --space 3;
shift + alt - 4 : yabai -m window --space 4;
shift + alt - t : yabai -m window --space 5;
shift + alt - b : yabai -m window --space 6;
shift + alt - c : yabai -m window --space 7;
shift + alt - i : yabai -m window --space 8;
shift + alt - o : yabai -m window --space 9;
shift + alt - n : yabai -m window --space 10;
shift + alt - v : yabai -m window --space 11;
shift + alt - a : yabai -m window --space 12;
shift + alt - d : yabai -m window --space 13;
shift + alt - f : yabai -m window --space 14;
shift + alt - e : yabai -m window --space 15;
shift + alt - p : yabai -m window --space 16;

alt - 1 : yabai -m query --spaces --space 1 | jq -r '.windows[0]' | xargs yabai -m window --focus ; yabai -m space --focus 1
alt - 2 : yabai -m query --spaces --space 2 | jq -r '.windows[0]' | xargs yabai -m window --focus ; yabai -m space --focus 2
alt - 3 : yabai -m query --spaces --space 3 | jq -r '.windows[0]' | xargs yabai -m window --focus ; yabai -m space --focus 3
alt - 4 : yabai -m query --spaces --space 4 | jq -r '.windows[0]' | xargs yabai -m window --focus ; yabai -m space --focus 4
alt - t : yabai -m query --spaces --space 5 | jq -r '.windows[0]' | xargs yabai -m window --focus ; yabai -m space --focus 5
alt - b : yabai -m query --spaces --space 6 | jq -r '.windows[0]' | xargs yabai -m window --focus ; yabai -m space --focus 6
alt - c : yabai -m query --spaces --space 7 | jq -r '.windows[0]' | xargs yabai -m window --focus ; yabai -m space --focus 7
alt - i : yabai -m query --spaces --space 8 | jq -r '.windows[0]' | xargs yabai -m window --focus ; yabai -m space --focus 8
alt - o : yabai -m query --spaces --space 9 | jq -r '.windows[0]' | xargs yabai -m window --focus ; yabai -m space --focus 9
alt - n : yabai -m query --spaces --space 10 | jq -r '.windows[0]' | xargs yabai -m window --focus ; yabai -m space --focus 10
alt - v : yabai -m query --spaces --space 11 | jq -r '.windows[0]' | xargs yabai -m window --focus ; yabai -m space --focus 11
alt - a : yabai -m query --spaces --space 12 | jq -r '.windows[0]' | xargs yabai -m window --focus ; yabai -m space --focus 12
alt - d : yabai -m query --spaces --space 13 | jq -r '.windows[0]' | xargs yabai -m window --focus ; yabai -m space --focus 13
alt - f : yabai -m query --spaces --space 14 | jq -r '.windows[0]' | xargs yabai -m window --focus ; yabai -m space --focus 14
alt - e : yabai -m query --spaces --space 15 | jq -r '.windows[0]' | xargs yabai -m window --focus ; yabai -m space --focus 15
alt - p : yabai -m query --spaces --space 16 | jq -r '.windows[0]' | xargs yabai -m window --focus ; yabai -m space --focus 16

# alt - 1 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[1] ]] && yabai -m space --focus $SPACES[1]
# alt - 2 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[2] ]] && yabai -m space --focus $SPACES[2]
# alt - 3 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[3] ]] && yabai -m space --focus $SPACES[3]
# alt - 4 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[4] ]] && yabai -m space --focus $SPACES[4]
# alt - t : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[5] ]] && yabai -m space --focus $SPACES[5]
# alt - b : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[6] ]] && yabai -m space --focus $SPACES[6]
# alt - c : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[7] ]] && yabai -m space --focus $SPACES[7]
# alt - i : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[8] ]] && yabai -m space --focus $SPACES[8]
# alt - o : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[9] ]] && yabai -m space --focus $SPACES[9]
# alt - n : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[10] ]] && yabai -m space --focus $SPACES[10]
# alt - v : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[11] ]] && yabai -m space --focus $SPACES[11]
# alt - a : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[12] ]] && yabai -m space --focus $SPACES[12]
# alt - d : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[13] ]] && yabai -m space --focus $SPACES[13]
# alt - f : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[14] ]] && yabai -m space --focus $SPACES[14]
# alt - e : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[15] ]] && yabai -m space --focus $SPACES[15]
# alt - p : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[16] ]] && yabai -m space --focus $SPACES[16]

# alt - 1 : yabai -m space --focus 1
# alt - 3 : yabai -m space --focus 3
# alt - 3 : yabai -m space --focus 3
# alt - 4 : yabai -m space --focus 4
# alt - t : yabai -m space --focus 5
# alt - b : yabai -m space --focus 6
# alt - c : yabai -m space --focus 7
# alt - i : yabai -m space --focus 8
# alt - o : yabai -m space --focus 9
# alt - n : yabai -m space --focus 10
# alt - v : yabai -m space --focus 11
# alt - a : yabai -m space --focus 12
# alt - d : yabai -m space --focus 13
# alt - f : yabai -m space --focus 14
# alt - e : yabai -m space --focus 15
# alt - p : yabai -m space --focus 16

# stop/start/restart yabai
# ctrl + alt - q : yabai --stop-service
# ctrl + alt - s : yabai --start-service
shift + alt - y : launchctl kickstart -k "gui/${UID}/org.nixos.yabai"
shift + alt - s : launchctl kickstart -k "gui/${UID}/org.nixos.skhd"
